{
  "common.or": "や",
  "common.and": "and",
  "main.title": "Svelte Intl Precompile",
  "main.subtitle": "The i18n library for Svelte that analyzes and compiles your translations at build time",
  "playground.title": "Playground",
  
  "introduction.title": "Introduction",
  "introduction.subsection.why-use-it": "Why you'd want to use it?",
  "introduction.paragraph.why-use-it-1": "Svelte-intl-precompile is an i18n library for Svelte apps that aims to provide all the features your app may need with the smallest possible penalty in both app size and runtime performance.",
  "introduction.paragraph.why-use-it-2": "To accomplish that it takes a different approach to most internalization libraries. Much like Svelte.js analyzes and understands your code and at build time compiles it to minimal and efficient javascript, this library inspects your translations defined in the  <a href='https://lokalise.com/blog/complete-guide-to-icu-message-format' class='text-primary underline'>ICU message syntax</a> and compiles them to small and efficient inline functions.",
  "introduction.paragraph.why-use-it-3": "If you use each and every feature supported by the ICU message syntax it will add around 2kb to your bundle after minification and compression. If you only use a few, it can go as low as 1kb.",
  "introduction.paragraph.why-use-it-4": "Since it doesn't have to parse and tokenize your translations in the browser, it is also faster. Around 4 times faster rendering a translation for the first time, and around 50% faster for already known translations.",
  "introduction.subsection.playground": "What? Show me the code",
  "introduction.paragraph.playground-preface": "There, play with it. Paste your own translations and see the transformed output.",
  "introduction.subsection.features": "What features does it have?",
  "introduction.paragraph.features-1": "All the features supported by the ICU message syntax are supported.<br>It has an API almost completely compatible with",
  "introduction.paragraph.features-2": ", another very popular and well designed internationalization library for Svelte.js ",
  "introduction.paragraph.features-3": "Its main features include:",
  "introduction.list-items.features-1": "Translations with interpolation, selected sub-translations and all ICU features.",
  "introduction.list-items.features-2": "Formatters for dates, tims, numbers, ordinals y currencies all leveraging the native Intl API available in modern browsers and node.",
  "introduction.list-items.features-3": "A svelte-oriented API providing convenient to use stores that update automatically when locale or translations change.",
  "introduction.list-items.features-4": "A range functions to load locales asynchronously when needed or to extract the default locale from the request headers in SSR mode.",
  "introduction.list-items.features-5": "Full tree-shaking of all the above features that your app doesn't use.",

  "icu-crash-course.title": "ICU構文 短期集中講座",
  "icu-crash-course.table-heads.definition": "入力",
  "icu-crash-course.table-heads.values": "値",
  "icu-crash-course.table-heads.output": "出力",
  "icu-crash-course.paragraph.main-1": "このライブラリは、ICUメッセージ構文で書かれた翻訳文を解析し、コンパイルします。ICUメッセージ構文は別の独立したプロジェクトですが、この講座ではその良さと主要な機能の使い方について理解を深めていきます。",
  "icu-crash-course.subsection.why": "なぜICUメッセージ構文を使うのか？",
  "icu-crash-course.paragraph.why-1": "ICUは <em class='italic'>International Components for Unicode</em> の略です。C/C++やJavaで人気が出始めて、javascriptのエコシステムでは国際化(internationalization)のデファクトスタンダードとなり、PythonやPHPでも人気があります。",
  "icu-crash-course.paragraph.why-2": "アプリの国際化は、翻訳された文字列を何らかのキーで辞書にマッピングするだけではありません。適切に国際化されたアプリでは、日付や時刻のフォーマット、小数や桁が多い数字に使われる区切り文字、通貨、言葉の性別のサポートなど、翻訳のあらゆる側面を処理しなければなりません。",
  "icu-crash-course.paragraph.why-3": "複数形のようなシンプルなものでさえ、言語によっては非常に複雑になります。英語、ドイツ語、スペイン語には単数形と複数形がありますが、スラヴ諸言語には3種類、アラビア語などの他の言語にはそのアイテムの数によっては6種類にもなります。ある複数形からその次の形に変えなければならない閾値は、地域によって変わることもあります。<br> 英語には性別のある単語はあまり多くありませんが、フランス語や至語にはそれがあり、形容詞は名詞の性別に合わせなければなりません。<code class='inline'>123456789</code> をアメリカ英語方式にフォーマットすると <code class='inline'>123,456,789</code> となりますが、インド方式にすると <code class='inline'>12,34,56,789</code> となります。<br> 通貨の$記号をフォーマットすると金額の前に、€の場合は後になります。",
  "icu-crash-course.paragraph.why-4": "ICU構文はこのような複雑さを開発者から取り除き、本物のプロフェッショナルな翻訳者が自身で全ての細かい問題を処理するのに十分な表現力を持つメタ言語を提供します。",
  "icu-crash-course.subsection.interpolations": "補間",
  "icu-crash-course.paragraph.interpolations-1": "ICUメッセージは値の補間をサポートしており、<code class='inline'>undefined</code> を渡しても <em class='italic'>\"undefined\"</em> として補間されないように適切にサニタイズされます。",
  "icu-crash-course.table-cells.interpolations": "Your favorite color is {chosen}",
  "icu-crash-course.subsection.plurals": "複数形",
  "icu-crash-course.paragraph.plurals-1": "どのアプリでも、2番めによく使われる機能は複数形です。ICU構文には専用の<code class='inline'>複数形</code>ヘルパーがあり、複数形の翻訳についてシンプルなものから非常に複雑なものまで、その翻訳文の中で定義することができます。",
  "icu-crash-course.paragraph.plurals-2": "複数形の各パスには、先頭に数値の修飾子が付きます。付けられる修飾子は以下の通りです:",
  "icu-crash-course.paragraph.plurals-3": "最初に例をいくつか見てみましょう:",
  "icu-crash-course.paragraph.plurals-4": "英語などの言語は <code class='inline'>one</code> と <code class='inline'>other</code> のみを使用しますが、他の言語では最適な複数形を使用することができます。<code class='inline'>few</code> と <code class='inline'>many</code> の使用を分ける特定の閾値は、非常に文化的なものです。",
  "icu-crash-course.paragraph.plurals-5": "また、<code class='inline'>=N</code> を使用して正確な値の翻訳を明示することができます。この方法で数字を指定すると、その言語のデフォルトの動作に優先します。<br> 例えば、英語では一般的な複数形を使用する代わりに <code class='inline'>=2</code> や <code class='inline'>=12</code> を使用して、明示的に a couple(1組) や a dozen(1ダース) のような異なる翻訳を指定することができます。",
  "icu-crash-course.paragraph.plurals-6": "最後に、複数形はハッシュタグを使って複数形に使用されている値を数値として出力することもできます。オプションとして、ヘルパーはハッシュタグで値に減算されるオフセット受け取ることができます。",
  "icu-crash-course.list-items.one": "(singular 単数形)",
  "icu-crash-course.list-items.two": "(dual 正確に2つを示す)",
  "icu-crash-course.list-items.few": "(paucal 不正確だが少数を示す)",
  "icu-crash-course.list-items.many": "(分数にも使用される)",
  "icu-crash-course.list-items.other": "(一般的な複数形の形式。複数形が1種類しかない言語で使用されます)",
  "icu-crash-course.table-cells.plurals-simple": "Your have {numCats, plural, one {one cat} other {# cats}}",
  "icu-crash-course.table-cells.plurals-complex": "Your have {numCats, plural, =0 {no cats at all} one {one single cat} =2 {a couple cats} =3 {a trio of cats} =12 {a dozen cats} other {exactly # cats}}",  
  "icu-crash-course.table-cells.plurals-offset": "{guestCount, plural, offset:1 =0 {Mary does not give a party.} =1 {Mary invites {guest} to her party.} =2 {Mary invites {guest} and one other person to her party.} other {Mary invites {guest} and # other people to her party.}}",
  "icu-crash-course.subsection.select": "選択",
  "icu-crash-course.paragraph.select-1": "<code class='inline'>選択</code> ヘルパーは引数に基づいて複数の候補の中から翻訳文を選択するために使用されます。<br> 色々な使い方がありますが、最も一般的なのは性別に関する翻訳に用いることです。",
  "icu-crash-course.table-cells.select": "Your {childGender, select, male {son} female {daughter} other {child}} has won an award",
  "icu-crash-course.table-cells.select-value-male": "Male",
  "icu-crash-course.table-cells.select-value-female": "Female",
  "icu-crash-course.table-cells.select-value-unknown": "Unknown",
  "icu-crash-course.subsection.date": "日付",
  "icu-crash-course.paragraph.date-1": "このヘルパーは、日付を、現在のロケールに合わせたデフォルトのフォーマットか、またはアプリの設定で追加したカスタムフォーマットにフォーマットします。<br> デフォルトのフォーマットは以下の通りです:",
  "icu-crash-course.list-items.short": ": 最もコンパクトな日付形式",
  "icu-crash-course.list-items.medium": ": 簡略化されたテキスト形式",
  "icu-crash-course.list-items.long": ": 長いテキスト形式",
  "icu-crash-course.list-items.full": ": 最も詳細で完全な日付",
  "icu-crash-course.table-cells.date": "Your next holidays start on {holidayStart, date, full}",
  "icu-crash-course.subsection.time": "時間",
  "icu-crash-course.paragraph.time": "日付ヘルパーとほとんど同じですが、これは日付の時間部分のみをフォーマットするためのものです。",
  "icu-crash-course.table-cells.time": "Your doctor's appointment is today at {appointment, time, short}",
  "icu-crash-course.subsection.number": "数値",
  "icu-crash-course.paragraph.number": "現在のロケールのルールに従って数字をフォーマットします。",
  "icu-crash-course.table-cells.number": "Your account balance is {num, number}",


  "getting-started.title": "はじめる",
  "getting-started.subsection.installation": "インストール",
  "getting-started.paragraph.installation-1": "Svelte Kit アプリに依存パッケージとして svelte-intl-precompile をインストールします。",
  "getting-started.subsection.create-translations": "翻訳を作成する",
  "getting-started.paragraph.create-translations-1": "次に、翻訳ファイルを格納するフォルダを作成します。 {dir1} {or} {dir2} といった名前のフォルダをプロジェクトルートに置くと良いでしょう",
  "getting-started.paragraph.create-translations-2": "もちろん、他のフォルダでもまったく問題ありません。",
  "getting-started.paragraph.create-translations-3": "JSON形式のファイルを推奨しますが、デフォルトエクスポートを持つJavaScriptファイルを使うこともできます。ファイル形式がどちらの場合でも、それらに含まれる翻訳はICUメッセージ文法の通常の文字列となります。",
  "getting-started.paragraph.create-translations-4": "作者は上記のようなフラットな辞書構造が好みですが、複数の階層を含む辞書構造を使って翻訳ファイルを定義しても構いません:",
  "getting-started.subsection.hook-into-sveltekit": "コンパイラを SvelteKit にフックする",
  "getting-started.paragraph.hook-into-sveltekit-1": "このライブラリのコンパイラはビルド時に動作するため、開発中のアプリのビルドパイプラインにフックする必要があります。<code class=\"bg-code px-2\">{path}</code>の vite プラグインのリストに追加してください:",
  "getting-started.paragraph.hook-into-sveltekit-2": "準備は完了です。ライブラリを使ってみましょう。",
  "getting-started.subsection.hook-into-vite": "Vite.js プロジェクトにコンパイラをフックする",
  "getting-started.paragraph.hook-into-vite-1": "SvelteKit を使わずに Vite.js を直接使用している場合も、設定はほとんど同様です。 SvelteKit が舞台裏では Vite.js を使用してるためです。コンパイラをインポートして、<code class=\"bg-code px-2\">{path}</code>のプラグインのリストに渡してください:",

  "configuration.title": "Configuration",
  "configuration.subsection.example": "Configuration example",
  "configuration.link.example": "Example",
  "configuration.paragraph.example-1": "This is the minimal working example of the library's initialization. Put this in your",
  "configuration.paragraph.example-2": "file.",
  "configuration.paragraph.example-3": "This will get you going but lets dive deeper on it more.",
  "configuration.subsection.static-locales": "Load locales statically",
  "configuration.paragraph.static-locales-1": "Like in the previous example, the easiest way to add your translation keys is to just import them as modules and register them using",
  "configuration.paragraph.static-locales-2": "Note that despite the fact that you defined your translations in JSON files, in here you are importing them as javascript modules from",
  "configuration.paragraph.static-locales-3": ". This is because the compiler has transformed your translations into a module with inline functions at built time.",
  "configuration.paragraph.static-locales-4": "This approach is loading all those languages even if only one is being displayed. Usually okay when kicking out a new project or if you only have a few of keys, but when your app grows you should start loading languages on demand.",
  "configuration.subsection.dynamic-locales": "Load locales dynamically",
  "configuration.paragraph.dynamic-locales-1": "Once you have a significant amount of translations and many locales it would be very wasteful to load every possible language for every possible user when they will only see their selected one. The library has a",
  "configuration.paragraph.dynamic-locales-2": "function to dynamically import languages when the user selects it and a",
  "configuration.paragraph.dynamic-locales-3": "to wait for locales to be loaded.",
  "configuration.paragraph.dynamic-locales-4": "If all your locales are dynamically loaded you want to stop the page from rendering initial locale has loaded. Calling it in Svete's",
  "configuration.paragraph.dynamic-locales-5": "function with do exactly that.",
  "configuration.subsection.dynamic-locales-shorthand": "Load locales dynamically (but shorter this time)",
  "configuration.paragraph.dynamic-locales-shorthand-1": "If you just want to register all your available locales (all the locales for which you have a JSON file with translations) automatically, there's a nice shorthand for that. The",
  "configuration.paragraph.dynamic-locales-shorthand-2": "folder for your translations doubles down as a module from which you can import two utilities: ",
  "configuration.paragraph.dynamic-locales-shorthand-3": "The first one is a function that when invoked is equivalent to calling",
  "configuration.paragraph.dynamic-locales-shorthand-4": "for all your locales.<br> The second one is an array of the available locales (wether you've registered them or not), for whatever use you might want to put them to.",
  "configuration.subsection.init": "Default & fallback locales",
  "configuration.paragraph.init-1": "To the call to",
  "configuration.paragraph.init-2": "the most important options are",
  "configuration.paragraph.init-3": ". The first determines the locale in which the app will be initially rendered and the second the locale that will be checking when a translation is not found in the currently selected locale.",
  "configuration.paragraph.init-4": "There's a lot we can do to achieve the best experience, like smartly initializing the",
  "configuration.paragraph.init-5": "to the users' configured locale if they are logged, read it from a cookie in case they are repeating visitors or choose it based on the requests <pre class='inline'>Accept-Language</pre> header when doing SSR, but the most straigtforward is to detect it from the browser or the URL with the provided utility functions.",
  "configuration.subsection.find-locale": "Find the best locale",
  "configuration.paragraph.find-locale-1": "There are many valid strategies to select the best locale to pass to the",
  "configuration.paragraph.find-locale-2": "function. This library provides helpers for the most common ones:",
  "configuration.definitions.navigator": "Extracts the locale from browser, which in turn is the operative systems' locale.",
  "configuration.definitions.query": "Extracts the locale on the given key of the query string of the URL.<br>E.g <pre class='inline'>getLocaleFromQueryString('lang')</pre> for <pre class='inline'>/users?sort=name&amp;dir=asc&amp;lang=es</pre>",
  "configuration.definitions.hash": "Like <pre class='inline'>getLocaleFromQueryString</pre> but for the URL hash.<br>E.g <pre class='inline'>getLocaleFromHash('lang')</pre> for <pre class='inline'>/users#sort=name&amp;dir=asc&amp;lang=es</pre>",
  "configuration.definitions.path": "Extracts the locale from the path of the URL.<br>E.g <pre class='inline'>getLocaleFromPathname(/^\/((es|en)(-\\w\\w)?)/)</pre> for <pre class='inline'>myapp.com/en-US/users</pre>",
  "configuration.definitions.host": "Extracts the locale from host.<br>E.g <pre class='inline'>getLocaleFromHostname(/^((es|en)(-\\w\\w)?)\\./)</pre> for <pre class='inline'>https://pt.myapp.com</pre>",
  "configuration.subsection.custom-formats": "Custom formats",
  "configuration.paragraph.custom-formats-1": "This library can format numbers, dates and times. It does it without adding significant weight to your app by leverating the Intl API already present in all modern browsers and in Node.js.<br/>By default you app can use these formats, but you can add your own.",
  "configuration.paragraph.custom-formats-2": "If you want to define your own formats pass them on initialization using the",
  "configuration.paragraph.custom-formats-3": "option, which will be deep merged with the default formats listed above. The formats must be valid options to forward to",
  
  "usage.title": "Usage",
  "usage.paragraph.preface-1": "The runtime API of this library is mostly taken from the great",
  "usage.paragraph.preface-2": ", to the point that in most cases you can switch from svelte-i18 to svelte-intl-precompile and vice versa without touching your application other than updating the import path of the utilities.",
  "usage.paragraph.preface-3": "Its store-centric API is particularly nice to use in templates and provides the added benefit of making your entire app reactive, automatically updating every translation when the user selects another locale or when more dictionary entries are loaded. For the following examples assume that we're working on an app containing these translations.",
  "usage.link.basic-translations": "Basic translations",
  "usage.subsection.basic-translations": "Basic translations: The <pre class='inline'>$t(key, ops)</pre> store.",
  "usage.paragraph.basic-translations-1": "This store is the one you will use the most. Just import it and use it as a function, passing in the translation key.",
  "usage.subsection.passing-arguments": "Passing arguments",
  "usage.paragraph.passing-arguments-1": "The second argument received by the",
  "usage.paragraph.passing-arguments-2": "is an object. Any argument used by your translation will be passed in the",
  "usage.paragraph.passing-arguments-3": "key.",
  "usage.paragraph.passing-arguments-4": "There is no difference if the given parameters are just interpolated, used for in plural/select or are number, dates or times to be formatted. All aguments are passed the same way.",
  "usage.subsection.formatting": "Formatting dates, times and numbers",
  "usage.paragraph.formatting-1": "While you can pass number, dates and times to your translations that will be formatted following your preferences, this library also has stores to conveniently format them directly from your javascript code.",
  "usage.subsection.other-stores": "Other stores",
  "usage.paragraph.other-stores-1": "There are three more stores worth mentioning:",
  "usage.paragraph.other-stores-2": "Lets build a component to change the current locale.",
  "usage.paragraph.other-stores-3": "The code above is quite straigtforward. We just iterate the list of available locales in <code class='bg-code px-2'>$locales</code> rendering a button for each one. Clicking on a button will set the current locale in <code class='bg-code px-2'>$locale</code> to the new value.<br/> Every translation in the app will update without refreshing the page.",
  "usage.definitions.other-stores-1": "Can be used to read or write the current locale (E.g: <pre class='inline'>\"es-ES\"</pre>).",
  "usage.definitions.other-stores-2": "Contain al array of all the available locales (E.g: <pre class='inline'>[\"es-ES\", \"en\", \"pt-BR\"]</pre>).",
  "usage.definitions.other-stores-3": "Contains <pre class='inline'>true</pre> when an asynchronous locale is still being loaded."
}